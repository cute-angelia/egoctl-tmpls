// @EgoctlOverwrite YES
// @EgoctlGenerateTime {{generateTime}}
package router

import (
  "github.com/go-chi/chi/v5"
	"log"
	"net/http"
	"embed"
	"time"
	"errors"
	"github.com/go-chi/cors"
	"io"
	"mime"
	"path"
	"path/filepath"
	chiMiddleware "github.com/go-chi/chi/v5/middleware"
)

func ServeHTTP(project string, port string, assets embed.FS) {
	// router
	r := chi.NewRouter()
	r.Use(chiMiddleware.RequestID)
	r.Use(chiMiddleware.Recoverer)
	r.Use(chiMiddleware.RealIP)
	r.Use(chiMiddleware.Logger)
	r.Use(chiMiddleware.Timeout(30 * time.Second))
	r.Use(chiMiddleware.ThrottleBacklog(20, 500, time.Second))

	// Basic CORS
	// for more ideas, see: https://developer.github.com/v3/#cross-origin-resource-sharing
	r.Use(cors.Handler(cors.Options{
		// AllowedOrigins:   []string{"https://foo.com"}, // Use this to allow specific origin hosts
		AllowedOrigins: []string{"https://*", "http://*"},
		// AllowOriginFunc:  func(r *http.Request, origin string) bool { return true },
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300, // Maximum value not ignored by any of major browsers
	}))

	r.Get("/status", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("ok"))
	})

	// 中间件
	r.Route("/api", func(r chi.Router) {
		// 接入 sign && jwt 校验
		// r.Use(
			// middleware.SignPass([]string{}, "e2f082d71b5fb9856dbdcddc7fae07b3"),
			// middleware.Jwt([]string{}, "d923lxll32920392093232323"),
		// )

    // project route
    {% for value in modelNames %}
    Init{{value}}(r)
    {% endfor %}
	})

	r.NotFound(func(w http.ResponseWriter, r *http.Request) {
		err := tryRead(assets, "vue/dist", r.URL.Path, w)
		if err == nil {
			return
		}
		err = tryRead(assets, "vue/dist", "index.html", w)
		if err != nil {
			log.Println(err)
			w.WriteHeader(404)
			w.Write([]byte("404 not found"))
		}
	})

	log.Println(project + "启动成功~ " + port)
	if err := http.ListenAndServe(port, r); err != nil {
		log.Println("启动错误：", err)
	}
}

func tryRead(fs embed.FS, prefix, requestedPath string, w http.ResponseWriter) error {
	f, err := fs.Open(path.Join(prefix, requestedPath))
	if err != nil {
		return err
	}
	defer f.Close()

	// Goのfs.Openはディレクトリを読みこもとうしてもエラーにはならないがここでは邪魔なのでエラー扱いにする
	stat, _ := f.Stat()
	if stat.IsDir() {
		return errors.New("文件夹不存在")
	}
	contentType := mime.TypeByExtension(filepath.Ext(requestedPath))
	w.Header().Set("Content-Type", contentType)
	w.Header().Set("Cache-Control", "max-age=864000")
	_, err = io.Copy(w, f)
	return err
}
